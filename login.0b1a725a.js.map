{"mappings":"ACAA,SAAS,cAAc,CAAC,SAAS,gBAAgB,CAAC,QAAS,eAAgB,CAAK,EAC5E,EAAM,cAAc,GAGpB,IAAM,EAAO,SAAS,aAAa,CAAC,QAC9B,EAAQ,EAAK,aAAa,CAAC,kBAAkB,KAAK,CAClD,EAAW,EAAK,aAAa,CAAC,kBAAkB,KAAK,CAG3D,GAAI,CAAC,GAAS,CAAC,EAAU,CACrB,MAAM,yCACN,MACJ,CAEA,GAAI,CAEA,IAAM,EAAW,MAAM,MAAM,uCAAwC,CACjE,OAAQ,OACR,QAAS,CACL,eAAgB,kBACpB,EACA,KAAM,KAAK,SAAS,CAAC,CAAE,MAAA,EAAO,SAAA,CAAS,EAC3C,GAEM,EAAO,MAAM,EAAS,IAAI,GAGhC,GAFA,QAAQ,GAAG,CAAC,uBAAwB,GAEhC,EAAS,EAAE,CAAE,CAEb,IAAM,EAAQ,EAAK,KAAK,CAClB,EAAiB,KAAK,GAAG,GAAK,OACpC,aAAa,OAAO,CAAC,QAAS,GAC9B,aAAa,OAAO,CAAC,eAAgB,GAGrC,IAAM,EAAW,EAAK,IAAI,CAG1B,MAAM,oCAEN,WAAW,WAEH,AAAa,WAAb,EACA,OAAO,QAAQ,CAAC,OAAO,CAAC,6CAExB,OAAO,QAAQ,CAAC,OAAO,CAAC,sCAEhC,EAAG,IACP,MACI,MAAM,EAAK,OAAO,EAAI,gBAE9B,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,sBAAuB,GACrC,MAAM,6CACV,CACJ","sources":["<anon>","js/login.js"],"sourcesContent":["document.getElementById('login').addEventListener('click', async function(event) {\n    event.preventDefault(); // Prevent default anchor behavior\n    // Get form values\n    const form = document.querySelector(\"form\");\n    const email = form.querySelector(\"#form3Example3\").value;\n    const password = form.querySelector(\"#form3Example4\").value;\n    // Validate inputs\n    if (!email || !password) {\n        alert(\"Please enter both email and password.\");\n        return;\n    }\n    try {\n        // Send login request to backend\n        const response = await fetch(\"http://localhost:5000/api/auth/login\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                email,\n                password\n            })\n        });\n        const data = await response.json();\n        console.log(\"Login response data:\", data);\n        if (response.ok) {\n            // Save token and its expiration time to localStorage\n            const token = data.token;\n            const expirationTime = Date.now() + 604800000; // Token expires in 7 days\n            localStorage.setItem('token', token);\n            localStorage.setItem('token_expiry', expirationTime);\n            // Get the user's role\n            const userRole = data.role;\n            // Role-based redirection\n            alert(\"Login successful! Redirecting...\");\n            setTimeout(function() {\n                // Redirect based on user role\n                if (userRole === 'seeker') window.location.replace(\"http://localhost:5000/create-profile.html\");\n                else window.location.replace(\"http://localhost:5000/post-job.html\"); // Default home page redirection\n            }, 2000); // Delay to show alert before redirection\n        } else alert(data.message || \"Login failed!\");\n    } catch (error) {\n        console.error('Error during login:', error);\n        alert('An error occurred. Please try again later.');\n    }\n});\n// Before making requests that require authentication, ensure the token is valid\nfunction checkSession() {\n    const token = localStorage.getItem('token');\n    const tokenExpiry = localStorage.getItem('token_expiry');\n    if (!token || Date.now() > tokenExpiry) {\n        alert('Your session has expired. Please log in again.');\n        window.location.replace(\"http://localhost:5000/login.html\"); // Redirect to login page\n    }\n}\n// Example of making an authenticated request to a protected endpoint\nasync function makeAuthenticatedRequest() {\n    const token = localStorage.getItem('token');\n    if (!token || Date.now() > localStorage.getItem('token_expiry')) {\n        alert(\"Session expired. Please log in again.\");\n        window.location.replace(\"http://localhost:5000/login.html\"); // Redirect to login\n    } else {\n        const response = await fetch(\"http://localhost:5000/api/protected-endpoint\", {\n            method: \"GET\",\n            headers: {\n                \"Authorization\": `Bearer ${token}`\n            }\n        });\n        if (response.ok) {\n            const data = await response.json();\n            console.log('Protected data:', data);\n        } else {\n            const errorData = await response.json();\n            alert(errorData.message || \"Error with the request\");\n        }\n    }\n}\n\n//# sourceMappingURL=login.0b1a725a.js.map\n","document.getElementById('login').addEventListener('click', async function (event) {\r\n    event.preventDefault(); // Prevent default anchor behavior\r\n\r\n    // Get form values\r\n    const form = document.querySelector(\"form\");\r\n    const email = form.querySelector(\"#form3Example3\").value;\r\n    const password = form.querySelector(\"#form3Example4\").value;\r\n\r\n    // Validate inputs\r\n    if (!email || !password) {\r\n        alert(\"Please enter both email and password.\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        // Send login request to backend\r\n        const response = await fetch(\"http://localhost:5000/api/auth/login\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({ email, password }),\r\n        });\r\n\r\n        const data = await response.json();\r\n        console.log(\"Login response data:\", data);\r\n\r\n        if (response.ok) {\r\n            // Save token and its expiration time to localStorage\r\n            const token = data.token;\r\n            const expirationTime = Date.now() + 7 * 24 * 60 * 60 * 1000; // Token expires in 7 days\r\n            localStorage.setItem('token', token);\r\n            localStorage.setItem('token_expiry', expirationTime);\r\n\r\n            // Get the user's role\r\n            const userRole = data.role;\r\n\r\n            // Role-based redirection\r\n            alert(\"Login successful! Redirecting...\");\r\n\r\n            setTimeout(function () {\r\n                // Redirect based on user role\r\n                if (userRole === 'seeker') {\r\n                    window.location.replace(\"http://localhost:5000/create-profile.html\");\r\n                } else {\r\n                    window.location.replace(\"http://localhost:5000/post-job.html\"); // Default home page redirection\r\n                }\r\n            }, 2000); // Delay to show alert before redirection\r\n        } else {\r\n            alert(data.message || \"Login failed!\");\r\n        }\r\n    } catch (error) {\r\n        console.error('Error during login:', error);\r\n        alert('An error occurred. Please try again later.');\r\n    }\r\n});\r\n\r\n// Before making requests that require authentication, ensure the token is valid\r\nfunction checkSession() {\r\n    const token = localStorage.getItem('token');\r\n    const tokenExpiry = localStorage.getItem('token_expiry');\r\n\r\n    if (!token || Date.now() > tokenExpiry) {\r\n        alert('Your session has expired. Please log in again.');\r\n        window.location.replace(\"http://localhost:5000/login.html\"); // Redirect to login page\r\n    }\r\n}\r\n\r\n// Example of making an authenticated request to a protected endpoint\r\nasync function makeAuthenticatedRequest() {\r\n    const token = localStorage.getItem('token');\r\n\r\n    if (!token || Date.now() > localStorage.getItem('token_expiry')) {\r\n        alert(\"Session expired. Please log in again.\");\r\n        window.location.replace(\"http://localhost:5000/login.html\"); // Redirect to login\r\n    } else {\r\n        const response = await fetch(\"http://localhost:5000/api/protected-endpoint\", {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Authorization\": `Bearer ${token}`,\r\n            }\r\n        });\r\n\r\n        if (response.ok) {\r\n            const data = await response.json();\r\n            console.log('Protected data:', data);\r\n        } else {\r\n            const errorData = await response.json();\r\n            alert(errorData.message || \"Error with the request\");\r\n        }\r\n    }\r\n}\r\n"],"names":["document","getElementById","addEventListener","event","preventDefault","form","querySelector","email","value","password","alert","response","fetch","method","headers","body","JSON","stringify","data","json","console","log","ok","token","expirationTime","Date","now","localStorage","setItem","userRole","role","setTimeout","window","location","replace","message","error"],"version":3,"file":"login.0b1a725a.js.map"}